import streamlit as st
import pandas as pd
import plotly.express as px
import os  # –î–ª—è –¥–µ–±–∞–≥–∞ –ø—É—Ç–∏.

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
@st.cache_data(ttl=3600)  # –ö—ç—à –Ω–∞ 1 —á–∞—Å, –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞.
def load_data(file_name):
    if os.path.exists(file_name):
        print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_name}")  # –û—Ç–ª–∞–¥–∫–∞ –≤ –ª–æ–≥–∞—Ö.
        df = pd.read_excel(file_name, sheet_name='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        df['–¢–æ–≤–∞—Ä_–∫–æ–¥'] = df['–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.extract(r'^(\d+)').astype('Int64')
        return df
    else:
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
        return pd.DataFrame()  # –ü—É—Å—Ç–æ–π DF, —á—Ç–æ–±—ã app –Ω–µ –∫—Ä–∞—à–∏–ª—Å—è.

# –ö–æ–Ω—Ñ–∏–≥.
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏", layout="wide", initial_sidebar_state="expanded")
st.title("üöÄ –î–∞—à–±–æ—Ä–¥: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å vs –¢–∞—Ä–≥–µ—Ç—ã –ø–æ –ú–µ—Å—è—Ü–∞–º")
st.markdown("---")

# –ó–∞–≥—Ä—É–∑–∫–∞ (–Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞).
file_path = 'Processed_Data.xlsx'  # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è ‚Äî —Ñ–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏.
df_data = load_data(file_path)
if df_data.empty:
    st.stop()  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.

# Sidebar.
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
categories = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=sorted(df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique()), default=sorted(df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique()))
months = st.sidebar.multiselect("–ú–µ—Å—è—Ü", options=sorted(df_data['–ú–µ—Å—è—Ü'].unique()), default=sorted(df_data['–ú–µ—Å—è—Ü'].unique()))
product_codes = st.sidebar.multiselect("–ö–æ–¥ –¢–æ–≤–∞—Ä–∞", options=sorted(df_data['–¢–æ–≤–∞—Ä_–∫–æ–¥'].dropna().unique()), default=[])
product_names = st.sidebar.selectbox("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞", options=['–í—Å–µ'] + sorted(df_data['–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].unique().tolist()))

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è.
filtered_data = df_data[
    (df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(categories)) &
    (df_data['–ú–µ—Å—è—Ü'].isin(months)) &
    (df_data['–¢–æ–≤–∞—Ä_–∫–æ–¥'].isin(product_codes) if product_codes else True) &
    (df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].notna())
]
if product_names != '–í—Å–µ':
    filtered_data = filtered_data[filtered_data['–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] == product_names]

# Pivot (–∞–≥—Ä–µ–≥–∞—Ü–∏—è).
if not filtered_data.empty:
    pivot_filtered = pd.pivot_table(
        filtered_data,
        values=['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 'VPO Target', 'VPO min Target'],
        index=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä_–∫–æ–¥', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ú–µ—Å—è—Ü'],
        aggfunc={'–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': 'mean', 'VPO Target': 'first', 'VPO min Target': 'first'},
        fill_value=0
    ).round(2).reset_index()
else:
    pivot_filtered = pd.DataFrame()

# –¢–∞–±–ª–∏—Ü–∞.
col1, col2 = st.columns([2, 1])
with col1:
    st.subheader("üìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¢–∞–±–ª–∏—Ü–∞ (1 —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä-–º–µ—Å—è—Ü)")
    if not pivot_filtered.empty:
        st.dataframe(pivot_filtered[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä_–∫–æ–¥', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ú–µ—Å—è—Ü', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 
                                    'VPO Target', 'VPO min Target']], use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.")

# –ì—Ä–∞—Ñ–∏–∫ 1.
with col2:
    st.subheader("üìà –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å vs –¢–∞—Ä–≥–µ—Ç—ã")
    if not pivot_filtered.empty:
        plot_data = pivot_filtered.melt(id_vars=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä_–∫–æ–¥', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ú–µ—Å—è—Ü'], 
                                        value_vars=['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 'VPO Target', 'VPO min Target'],
                                        var_name='–ú–µ—Ç—Ä–∏–∫–∞', value_name='–ó–Ω–∞—á–µ–Ω–∏–µ')
        fig1 = px.line(plot_data, x='–ú–µ—Å—è—Ü', y='–ó–Ω–∞—á–µ–Ω–∏–µ', color='–ú–µ—Ç—Ä–∏–∫–∞', title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –ú–µ—Å—è—Ü–∞–º", markers=True,
                       color_discrete_map={'–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': 'blue', 'VPO Target': 'green', 'VPO min Target': 'orange'})
        fig1.update_xaxes(title="–ú–µ—Å—è—Ü")
        fig1.update_yaxes(title="–ó–Ω–∞—á–µ–Ω–∏–µ")
        st.plotly_chart(fig1, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# –ì—Ä–∞—Ñ–∏–∫ 2.
st.subheader("üéØ % –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¢–∞—Ä–≥–µ—Ç–∞")
if not pivot_filtered.empty and pivot_filtered['VPO Target'].sum() > 0:
    perf_pivot = pivot_filtered.copy()
    perf_pivot['% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'] = (perf_pivot['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] / perf_pivot['VPO Target'] * 100).round(1)
    fig2 = px.bar(perf_pivot, x='–ú–µ—Å—è—Ü', y='% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', color='% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', title="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¢–∞—Ä–≥–µ—Ç–∞ (%)",
                  color_continuous_scale=['red', 'yellow', 'green'], hover_data=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
    fig2.update_yaxes(title="% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", range=[0, 200])
    st.plotly_chart(fig2, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %.")

# –ò–Ω—Å–∞–π—Ç—ã.
st.subheader("üìã –ö–ª—é—á–µ–≤—ã–µ –ò–Ω—Å–∞–π—Ç—ã")
if not pivot_filtered.empty:
    avg_turnover = pivot_filtered['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'].mean().round(2)
    avg_target = pivot_filtered['VPO Target'].mean().round(2)
    achievement = (avg_turnover / avg_target * 100).round(1) if avg_target > 0 else 0
    col1, col2, col3 = st.columns(3)
    col1.metric("–°—Ä–µ–¥–Ω—è—è –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å", f"{avg_turnover}")
    col2.metric("–°—Ä–µ–¥–Ω–∏–π –¢–∞—Ä–≥–µ—Ç", f"{avg_target}")
    col3.metric("–°—Ä–µ–¥–Ω–µ–µ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", f"{achievement}%", delta=f"{achievement - 100:+.1f}%")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.")

# –§—É—Ç–µ—Ä.
st.markdown("---")
st.caption("üí° –î–∞—à–±–æ—Ä–¥ –Ω–∞ Streamlit + Plotly. –§–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –§–∏–∫—Å: –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.")
