import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ª–∏—Å—Ç "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" ‚Äî robust, –±–µ–∑ pivot-–ª–∏—Å—Ç–∞).
@st.cache_data  # –ö—ç—à –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.
def load_data(file_path):
    df = pd.read_excel(file_path, sheet_name='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    return df

# –ö–æ–Ω—Ñ–∏–≥: –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω.
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏", layout="wide", initial_sidebar_state="expanded")
st.title("üöÄ –î–∞—à–±–æ—Ä–¥: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å vs –¢–∞—Ä–≥–µ—Ç—ã –ø–æ –ú–µ—Å—è—Ü–∞–º")
st.markdown("---")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
file_path = r'C:\Users\40216390\OneDrive - Pepsico\Desktop\Customer Callobaration\FIX PRICE\–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.xlsx'  # –¢–≤–æ–π –ø—É—Ç—å.
df_data = load_data(file_path)

# Sidebar: –§–∏–ª—å—Ç—Ä—ã (–∫—Ä–∞—Å–∏–≤–æ —Å –∏–∫–æ–Ω–∫–∞–º–∏).
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
categories = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=sorted(df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique()), default=sorted(df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique()))
months = st.sidebar.multiselect("–ú–µ—Å—è—Ü", options=sorted(df_data['–ú–µ—Å—è—Ü'].unique()), default=sorted(df_data['–ú–µ—Å—è—Ü'].unique()))
product_codes = st.sidebar.multiselect("–ö–æ–¥ –¢–æ–≤–∞—Ä–∞", options=sorted(df_data['–¢–æ–≤–∞—Ä_–∫–æ–¥'].unique()))
product_names = st.sidebar.selectbox("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞", options=['–í—Å–µ'] + sorted(df_data['–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].unique().tolist()))

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NaN).
filtered_data = df_data[
    (df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(categories)) &
    (df_data['–ú–µ—Å—è—Ü'].isin(months)) &
    (df_data['–¢–æ–≤–∞—Ä_–∫–æ–¥'].isin(product_codes) if product_codes else True) &
    (df_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].notna())  # –§–∏–ª—å—Ç—Ä NaN –∫–∞—Ç–µ–≥–æ—Ä–∏–π
]
if product_names != '–í—Å–µ':
    filtered_data = filtered_data[filtered_data['–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] == product_names]

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π pivot –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–Ω–∞ filtered_data ‚Äî —Ñ–∏–∫—Å KeyError).
if not filtered_data.empty:
    pivot_filtered = pd.pivot_table(
        filtered_data,
        values=['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 'VPO Target', 'VPO min Target'],
        index=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä_–∫–æ–¥', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ú–µ—Å—è—Ü'],
        aggfunc={
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': 'mean',
            'VPO Target': 'first',
            'VPO min Target': 'first'
        },
        fill_value=0  # –î–ª—è NaN –≤ —Ç–∞—Ä–≥–µ—Ç–∞—Ö
    ).round(2).reset_index()
else:
    pivot_filtered = pd.DataFrame()  # –ü—É—Å—Ç–æ–π –¥–ª—è empty —Ñ–∏–ª—å—Ç—Ä–æ–≤.

# –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.
col1, col2 = st.columns([2, 1])
with col1:
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –¢–∞–±–ª–∏—Ü–∞ (–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è)")
    if not filtered_data.empty:
        st.dataframe(filtered_data[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä_–∫–æ–¥', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ú–µ—Å—è—Ü', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 
                                   'VPO Target', 'VPO min Target', '–î–∞—Ç–∞']], use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤—ã–±–æ—Ä.")

# –ì—Ä–∞—Ñ–∏–∫ 1: –õ–∏–Ω–µ–π–Ω—ã–π ‚Äî –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å vs –¢–∞—Ä–≥–µ—Ç—ã –ø–æ –ú–µ—Å—è—Ü–∞–º (melt –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞).
with col2:
    st.subheader("üìà –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å vs –¢–∞—Ä–≥–µ—Ç—ã")
    if not pivot_filtered.empty:
        # Melt –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: –ú–µ—Å—è—Ü | –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ.
        plot_data = pivot_filtered.melt(id_vars=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä_–∫–æ–¥', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ú–µ—Å—è—Ü'], 
                                        value_vars=['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 'VPO Target', 'VPO min Target'],
                                        var_name='–ú–µ—Ç—Ä–∏–∫–∞', value_name='–ó–Ω–∞—á–µ–Ω–∏–µ')
        fig1 = px.line(plot_data, x='–ú–µ—Å—è—Ü', y='–ó–Ω–∞—á–µ–Ω–∏–µ', color='–ú–µ—Ç—Ä–∏–∫–∞', 
                       title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –ú–µ—Å—è—Ü–∞–º", markers=True,
                       color_discrete_map={'–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': 'blue', 'VPO Target': 'green', 'VPO min Target': 'orange'})
        fig1.update_xaxes(title="–ú–µ—Å—è—Ü", tickvals=sorted(months))
        fig1.update_yaxes(title="–ó–Ω–∞—á–µ–Ω–∏–µ")
        st.plotly_chart(fig1, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# –ì—Ä–∞—Ñ–∏–∫ 2: –ë–∞—Ä ‚Äî % –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¢–∞—Ä–≥–µ—Ç–∞ (–æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å / VPO Target * 100).
st.subheader("üéØ % –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¢–∞—Ä–≥–µ—Ç–∞")
if not pivot_filtered.empty and 'VPO Target' in pivot_filtered.columns and pivot_filtered['VPO Target'].sum() > 0:
    perf_pivot = pivot_filtered.copy()
    perf_pivot['% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'] = (perf_pivot['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] / perf_pivot['VPO Target'] * 100).round(1)
    fig2 = px.bar(perf_pivot, x='–ú–µ—Å—è—Ü', y='% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', color='% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                  color_continuous_scale=['red', 'yellow', 'green'],  # –ö—Ä–∞—Å–Ω—ã–π <50%, –∑–µ–ª–µ–Ω—ã–π >100%.
                  title="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¢–∞—Ä–≥–µ—Ç–∞ (%)", hover_data=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
    fig2.update_yaxes(title="% –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", range=[0, 200])
    st.plotly_chart(fig2, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è % –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞—Ä–≥–µ—Ç—ã).")

# –ò–Ω—Ñ–æ: –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞ filtered_data).
st.subheader("üìã –ö–ª—é—á–µ–≤—ã–µ –ò–Ω—Å–∞–π—Ç—ã")
if not filtered_data.empty:
    avg_turnover = filtered_data['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'].mean().round(2)
    avg_target = filtered_data['VPO Target'].dropna().mean().round(2)
    achievement = (avg_turnover / avg_target * 100).round(1) if avg_target > 0 else 0
    col1, col2, col3 = st.columns(3)
    col1.metric("–°—Ä–µ–¥–Ω—è—è –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å", f"{avg_turnover}")
    col2.metric("–°—Ä–µ–¥–Ω–∏–π –¢–∞—Ä–≥–µ—Ç", f"{avg_target}")
    col3.metric("–°—Ä–µ–¥–Ω–µ–µ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", f"{achievement}%", delta=f"{achievement - 100:+.1f}%")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤.")

# –§—É—Ç–µ—Ä.
st.markdown("---")
st.caption("üí° –î–∞—à–±–æ—Ä–¥ –Ω–∞ Streamlit + Plotly. –û–±–Ω–æ–≤–ª–µ–Ω–æ: 29.10.2025. –§–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –§–∏–∫—Å: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π pivot –Ω–∞ df_data.")